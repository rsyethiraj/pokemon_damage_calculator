#include "catch_amalgamated.hpp"
#include "pokemon.h"
#include "PokedexEntry.h"

TEST_CASE("Pokemon stats are calculated correctly", "[Pokemon]") {
    PokedexEntry pikachu("Pikachu", Type::Electric, Type::None, 35, 55, 40, 50, 50, 90, 0.4f, 6.0f, "Electric mouse");
    
    std::array<int, 6> EVs = {0, 0, 0, 0, 0, 0};
    std::array<int, 6> IVs = {31, 31, 31, 31, 31, 31};
    Pokemon p(&pikachu, Nature::Hardy, "Sparky", EVs, IVs, 50);
    
    std::array<int, 6> stats = p.getStats();
    
    //These stats were generated by using raw values from Pokemon Showdown's Teambuilder.
    SECTION("HP stat calculation") {
        REQUIRE(stats[0] == ((2 * 35 + 31 + 0) * 50) / 100 + 50 + 10);
    }
    SECTION("Attack stat calculation") {
        REQUIRE(stats[1] == 75);
    }
    SECTION("Defense stat calculation") {
        REQUIRE(stats[2] == 60);
    }
    SECTION("Special Attack stat calculation") {
        REQUIRE(stats[3] == 70);
    }
    SECTION("Special Defense stat calculation") {
        REQUIRE(stats[4] == 70);
    }
    SECTION("Speed stat calculation") {
        REQUIRE(stats[5] == 110);
    }
    //Sets the EVs, makes sure that the result is correct
    EVs = {0, 0, 4, 252, 0, 252};
    p.setEVs(EVs);
    stats = p.getStats();
    
    SECTION("HP stat calculation") {
        REQUIRE(stats[0] == ((2 * 35 + 31 + 0) * 50) / 100 + 50 + 10);
    }
    SECTION("Attack stat calculation") {
        REQUIRE(stats[1] == 75);
    }
    SECTION("Defense stat calculation") {
        REQUIRE(stats[2] == 61);
    }
    SECTION("Special Attack stat calculation") {
        REQUIRE(stats[3] == 102);
    }
    SECTION("Special Defense stat calculation") {
        REQUIRE(stats[4] == 70);
    }
    SECTION("Speed stat calculation") {
        REQUIRE(stats[5] == 142);
    }
    
    //removes all EVs
    EVs = {0, 0, 0, 0, 0, 0};
    p.setEVs(EVs);
    stats = p.getStats();
    SECTION("HP stat calculation") {
        REQUIRE(stats[0] == ((2 * 35 + 31 + 0) * 50) / 100 + 50 + 10);
    }
    SECTION("Attack stat calculation") {
        REQUIRE(stats[1] == 75);
    }
    SECTION("Defense stat calculation") {
        REQUIRE(stats[2] == 60);
    }
    SECTION("Special Attack stat calculation") {
        REQUIRE(stats[3] == 70);
    }
    SECTION("Special Defense stat calculation") {
        REQUIRE(stats[4] == 70);
    }
    SECTION("Speed stat calculation") {
        REQUIRE(stats[5] == 110);
    }
    //Sets the level to 100, checks that stats are correct
    p.setLevel(100);
    stats = p.getStats();
    SECTION("HP stat calculation") {
        REQUIRE(stats[0] == 211);
    }
    SECTION("Attack stat calculation") {
        REQUIRE(stats[1] == 146);
    }
    SECTION("Defense stat calculation") {
        REQUIRE(stats[2] == 116);
    }
    SECTION("Special Attack stat calculation") {
        REQUIRE(stats[3] == 136);
    }
    SECTION("Special Defense stat calculation") {
        REQUIRE(stats[4] == 136);
    }
    SECTION("Speed stat calculation") {
        REQUIRE(stats[5] == 216);
    }
    //Creates a new pokemon with a boosting nature
    PokedexEntry LopunnyMega("Lopunny-Mega", Type::Normal, Type::Fighting, 65, 136, 94, 54, 96, 135, 1.3f, 28.3f, "The mega evolution of Lopunny. A powerful and fast physical attacker. ");
    EVs = {0, 252, 4, 0, 0, 252};
    Pokemon ml(&LopunnyMega, Nature::Jolly, "", EVs, IVs, 100);
    stats = ml.getStats();
    SECTION("HP stat calculation") {
        REQUIRE(stats[0] == 271);
    }
    SECTION("Attack stat calculation") {
        REQUIRE(stats[1] == 371);
    }
    SECTION("Defense stat calculation") {
        REQUIRE(stats[2] == 225);
    }
    SECTION("Special Attack stat calculation") {
        REQUIRE(stats[3] == 129);
    }
    SECTION("Special Defense stat calculation") {
        REQUIRE(stats[4] == 228);
    }
    SECTION("Speed stat calculation") {
        REQUIRE(stats[5] == 405);
    }
    //Tests on the case where HP stat is equal to 1 (Shedinja)
    PokedexEntry Shedinja("Shedinja", Type::Bug, Type::Ghost, 1, 90, 45, 30, 30, 40, 0.8f, 1.2f, "A strange pokemon with 1 hit point that only takes damage from super-effective attacks");
    EVs = {0, 0, 0, 0, 0, 0};
    Pokemon s(&Shedinja, Nature::Hardy, "", EVs, IVs, 100);
    stats = s.getStats();
    SECTION("HP stat calculation") {
        REQUIRE(stats[0] == 1);
    }
    SECTION("Attack stat calculation") {
        REQUIRE(stats[1] == 216);
    }
    SECTION("Defense stat calculation") {
        REQUIRE(stats[2] == 126);
    }
    SECTION("Special Attack stat calculation") {
        REQUIRE(stats[3] == 96);
    }
    SECTION("Special Defense stat calculation") {
        REQUIRE(stats[4] == 96);
    }
    SECTION("Speed stat calculation") {
        REQUIRE(stats[5] == 116);
    }
}

TEST_CASE("Input errors are properly handled", "[Pokemon][Exception], [PokedexEntry][Exception]") {
    //Checks if the Type fields are properly created/modified
    SECTION("Initializes type1 as None") {
        REQUIRE_THROWS_AS(
            PokedexEntry("Shedinja", Type::None, Type::None, 1, 90, 45, 30, 30, 40, 0.8f, 1.2f, "A strange pokemon with 1 hit point that only takes damage from super-effective attacks"), std::invalid_argument);
    }
    SECTION("Initializes type2=type1") {
        PokedexEntry pikachu("Pikachu", Type::Electric, Type::Electric, 35, 55, 40, 50, 50, 90, 0.4f, 6.0f, "Electric mouse");
        REQUIRE(pikachu.getType1() == Type::Electric);
        REQUIRE(pikachu.getType2() == Type::None);
    }
    
    std::array<int, 6> IVs = {0, 0, 0, 0, 0, 0};
    std::array<int, 6> badEVs = {256, 0, 0, 0, 0, 0};
    PokedexEntry pikachu("Pikachu", Type::Electric, Type::None, 35, 55, 40, 50, 50, 90, 0.4f, 6.0f, "Electric mouse");
    SECTION("Initializes Pokemon with Bad EVs") {
        REQUIRE_THROWS_AS(Pokemon(&pikachu, Nature::Hardy, "Sparky", badEVs, IVs, 50), std::invalid_argument);
        badEVs = {3, 0, -10, 0, 0, 0};
        REQUIRE_THROWS_AS(Pokemon(&pikachu, Nature::Hardy, "Sparky", badEVs, IVs, 50), std::invalid_argument);
        REQUIRE_THROWS_AS(Pokemon(&pikachu, Nature::Hardy, "Sparky", IVs, badEVs, 50), std::invalid_argument);
        badEVs = {252, 252, 252, 0, 0, 0};
        REQUIRE_THROWS_AS(Pokemon(&pikachu, Nature::Hardy, "Sparky", badEVs, IVs, 50), std::invalid_argument);
        badEVs = {32, 32, 0, 0, 0, 0};
        REQUIRE_THROWS_AS(Pokemon(&pikachu, Nature::Hardy, "Sparky", IVs, badEVs, 50), std::invalid_argument);
    }
}
